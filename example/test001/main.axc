class Vec3 {
	var x=0.0, y=0.0, z=0.0
}

class Color {
	var r=0.0, g=0.0, b=0.0, a=0.0
}

class Image {
	var pixels = Color[0]
}


class App {

	fn main() {
		/*
		print( fmt('a = {?,8:x}', a ) )  
		printf( 'a = {?,8:x}'@ a )
		format( 'a = {?,8:x}', a )

		print( 'a = {a,8:x}' )
		print( 'a = \(str(a,8,'x'))')
		print( 'a = ' + str(a,8,'x') + ' ' )

		print( "\($name(this))" = $typename(this)" )
		*/
	}

/*
	var a int[] = [4,5,6]
	var b dict<string,string> = ['a':'apple','b':'boy']

	var c char = char('3')
	var d = u8char('3')
	var e = u8string('hello')
*/
	var j = i + 10, i = 33
	var s = "ABCD"

	var a = A

	class A {
		var x = 1 + 2
		fn test() {
		/*
			let a = vec2f(1,1)
			let b = vec2f(2,2)

			var c = a.cross(b)

			mat4x4

			a = @b
			a = ax_move(b)
		*/
		}
	}

	class B : A {
		var y = 1
	}


	struct Pt {
		let x=0, y=1

		fn sub() {

		}
	}

//	delegate	MyDelegate( a int ) int

	fn add( a int, b int ) int {

	}

	fn add( b = 0 ) { 
	}

	/*
	func add(a:int, b:int) : int{
		if a>b {
			print("test\n123","")
		}


		if a>b {
			print("","")
		}else{
			print("","")		
		}

		do{
			print("","")
		}while a>b

		while a<b {
			print("","")

		}

		for a in list {

		}
		return a+b;
	}

	func print( s:str, a:str ) {
	}


	func main() : int {
		var b = 0b1000
		var a = .1 + 1e-5
		var c = 0xFFFF_FFFFU
		var d = 1_000u


	
		a = a + (3 + 1* (-5 + 1)*1 + 1) * 2
		b = b + b * 2
		b = (b + b) * 2
		b = b + add(1,2) * b
		print("Hello World ", "aa" )


		return
	}
	*/
}
